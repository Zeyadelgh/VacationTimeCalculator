
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Image;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.IOException;
import java.net.URI;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Zayed
 */
public class VacationTimeCalculatorGUI extends javax.swing.JFrame {

    /**
     * Creates new form VacationTimeCalculatorGUI
     */
    public VacationTimeCalculatorGUI() {
        initComponents();

        dialogXaxis = this.getWidth() / 2;
        dialogYaxis = this.getHeight() / 2;
        point = new Point(dialogXaxis, dialogYaxis);
        String temp = getTitle();
        setTitle(temp + " - today's date - " + todaysDate);
    }

    // used to get the width of the frame
    int dialogXaxis;
    // used to get the width of the frame
    int dialogYaxis;
    // Used to set the position of the popup diaglog
    Point point;
    // Booleans to differentiate between current date and future date
    boolean current = true, future = false;
    // Booleans used to check for fields validity
    boolean clearFields = false, isStartDateValid = false, startDateEmpty = true, futureDateEmpty = true, isYearsOfServiceValid=false;
    // 2-D array that holds the years on when the a hourly credits occurs and the value of the increment
    double[][] hourlyMonthCreditArray = {{0, 9.375}, {7, 10.625}, {8, 12.500}, {16, 13.750}, {17, 14.400}, {18, 15.675}, {27, 17.500}, {28, 18.750}};
    // Holds the number of the monthsm, used in loops
    int[] monthsNumbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
    // Holds the value in the Total year service JTextfield
    double enterYearsOfServiceVar;
    // Create a date object for start date and future date
    LocalDate startDate, futureDate;
    // Gets today's date
    Date today = new Date();
    // Sets today's date
    LocalDate todaysDate = today.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    // used to calculate periods of current period and future period
    Period currentPeriod, futurePeriod;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        instructionJDialog = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        AboutJDialog = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea5 = new javax.swing.JTextArea();
        MainPanel = new javax.swing.JPanel();
        leftPanel = new javax.swing.JPanel();
        startDateLabel = new javax.swing.JLabel();
        futureDateLabel = new javax.swing.JLabel();
        yearsOfService = new javax.swing.JLabel();
        jTextArea1 = new javax.swing.JTextArea();
        startDateYear = new javax.swing.JTextField();
        startDateMonth = new javax.swing.JTextField();
        startDateDay = new javax.swing.JTextField();
        futureDateMonth = new javax.swing.JTextField();
        futureDateDay = new javax.swing.JTextField();
        jTextArea2 = new javax.swing.JTextArea();
        jTextArea3 = new javax.swing.JTextArea();
        yearlyDaysResult = new javax.swing.JLabel();
        yearlyHourlyResult = new javax.swing.JLabel();
        totalYearsResult = new javax.swing.JLabel();
        clear = new javax.swing.JButton();
        submit = new javax.swing.JButton();
        futureDateYear = new javax.swing.JTextField();
        enterYearsOfService = new javax.swing.JTextField();
        bottomPanel = new javax.swing.JPanel();
        janLabel1 = new javax.swing.JLabel();
        jan = new javax.swing.JLabel();
        feb = new javax.swing.JLabel();
        febLabel1 = new javax.swing.JLabel();
        march = new javax.swing.JLabel();
        marchLabel1 = new javax.swing.JLabel();
        april = new javax.swing.JLabel();
        aprilLabel1 = new javax.swing.JLabel();
        may = new javax.swing.JLabel();
        mayLabel1 = new javax.swing.JLabel();
        june = new javax.swing.JLabel();
        juneLabel1 = new javax.swing.JLabel();
        july = new javax.swing.JLabel();
        julylLabel1 = new javax.swing.JLabel();
        aug = new javax.swing.JLabel();
        augLabel1 = new javax.swing.JLabel();
        sept = new javax.swing.JLabel();
        septlLabel1 = new javax.swing.JLabel();
        oct = new javax.swing.JLabel();
        octLabel1 = new javax.swing.JLabel();
        nov = new javax.swing.JLabel();
        novLabel1 = new javax.swing.JLabel();
        dec = new javax.swing.JLabel();
        decLabel1 = new javax.swing.JLabel();
        jan2 = new javax.swing.JLabel();
        feb2 = new javax.swing.JLabel();
        march2 = new javax.swing.JLabel();
        april2 = new javax.swing.JLabel();
        may2 = new javax.swing.JLabel();
        june2 = new javax.swing.JLabel();
        july2 = new javax.swing.JLabel();
        aug2 = new javax.swing.JLabel();
        sept2 = new javax.swing.JLabel();
        oct2 = new javax.swing.JLabel();
        nov2 = new javax.swing.JLabel();
        dec2 = new javax.swing.JLabel();
        decLabel2 = new javax.swing.JLabel();
        novLabel2 = new javax.swing.JLabel();
        octLabel2 = new javax.swing.JLabel();
        septlLabel2 = new javax.swing.JLabel();
        augLabel2 = new javax.swing.JLabel();
        julylLabel2 = new javax.swing.JLabel();
        juneLabel2 = new javax.swing.JLabel();
        mayLabel2 = new javax.swing.JLabel();
        aprilLabel2 = new javax.swing.JLabel();
        marchLabel2 = new javax.swing.JLabel();
        febLabel2 = new javax.swing.JLabel();
        janLabel2 = new javax.swing.JLabel();
        currentYearLabel = new javax.swing.JLabel();
        futureYearLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea7 = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextArea9 = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea8 = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextArea10 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        anniversaryDays0 = new javax.swing.JLabel();
        anniversaryHours0 = new javax.swing.JLabel();
        anniversaryDate0 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        anniversaryDays7 = new javax.swing.JLabel();
        anniversaryHours7 = new javax.swing.JLabel();
        anniversaryDate7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        anniversaryDays8 = new javax.swing.JLabel();
        anniversaryHours8 = new javax.swing.JLabel();
        anniversaryHours16 = new javax.swing.JLabel();
        anniversaryDate16 = new javax.swing.JLabel();
        anniversaryDate8 = new javax.swing.JLabel();
        anniversaryDays16 = new javax.swing.JLabel();
        anniversaryHours17 = new javax.swing.JLabel();
        anniversaryDate17 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        anniversaryDays17 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        anniversaryDays18 = new javax.swing.JLabel();
        anniversaryDays27 = new javax.swing.JLabel();
        anniversaryHours18 = new javax.swing.JLabel();
        anniversaryHours27 = new javax.swing.JLabel();
        anniversaryDate18 = new javax.swing.JLabel();
        anniversaryDate27 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        anniversaryDays28 = new javax.swing.JLabel();
        anniversaryHours28 = new javax.swing.JLabel();
        anniversaryDate28 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        print = new javax.swing.JMenuItem();
        exitMenu = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        collectiveAgreementMenu = new javax.swing.JMenuItem();
        instructionMenu = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        instructionJDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        instructionJDialog.setTitle("Instructions");
        instructionJDialog.setAlwaysOnTop(true);
        instructionJDialog.setBackground(new java.awt.Color(201, 228, 255));
        instructionJDialog.setMinimumSize(new java.awt.Dimension(840, 680));
        instructionJDialog.setModal(true);
        instructionJDialog.setResizable(false);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextArea4.setEditable(false);
        jTextArea4.setColumns(20);
        jTextArea4.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        jTextArea4.setRows(5);
        jTextArea4.setText("This calculator will calculate your vacation hours credits earned per month.\n\nHow to use:-\n\nThe date must be in the format yyyy-mm-dd\n\nOption One (Most Accurate):\n1. Enter you start date\n\tStart date must be greater than 1900-01-01.\n\tStart date must be less than or equal to today's date.\n\n   That's it! The calculator will calculate how many years of service you have\n   accrued and it will display how many vacation hours you earn per month.\n\nOption Two - with a future date:-\n1. Follow option one\n2. Enter a future date\n   \tFuture Date must be greater than today's date.\n\n   That's it! Use this if you need to know how many hours of vacation you have\n   on a specific date in the future.\n\nOption Three - Quick estimate:-\n   If you do not know your start date just enter your estimated years of\n   service and the calculator will give you an estimate of how many hours of \n   vacation you earn per month. Least accurate method.\n   ");
        jTextArea4.setMinimumSize(instructionJDialog.getPreferredSize());
        jTextArea4.setPreferredSize(new java.awt.Dimension(780, 680));
        jScrollPane1.setViewportView(jTextArea4);

        javax.swing.GroupLayout instructionJDialogLayout = new javax.swing.GroupLayout(instructionJDialog.getContentPane());
        instructionJDialog.getContentPane().setLayout(instructionJDialogLayout);
        instructionJDialogLayout.setHorizontalGroup(
            instructionJDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(instructionJDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 938, Short.MAX_VALUE)
                .addContainerGap())
        );
        instructionJDialogLayout.setVerticalGroup(
            instructionJDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(instructionJDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 654, Short.MAX_VALUE)
                .addContainerGap())
        );

        AboutJDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        AboutJDialog.setTitle("Instructions");
        AboutJDialog.setAlwaysOnTop(true);
        AboutJDialog.setBackground(new java.awt.Color(201, 228, 255));
        AboutJDialog.setMinimumSize(new java.awt.Dimension(840, 680));
        AboutJDialog.setModal(true);
        AboutJDialog.setResizable(false);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextArea5.setEditable(false);
        jTextArea5.setColumns(20);
        jTextArea5.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        jTextArea5.setRows(5);
        jTextArea5.setText("Analytic's Vacation Time Calculator:\n\nThis calculator was created to help full time employees who work 37.5 hours\nper week to see a breakdown of how many vacation hours they are entitled to\nevery year.\n\nIt is based on the collective agreement vacation breakdown. A link to the \ncollective agreemnt is found under the help menu. \n\nThis calculator does not replace your vacation breakdown on CAS. If there are\ndiscrepencies, use CAS as a reference and contact CWA support to clarify any\nquestions you may have.\n\nThe table on the right side tells you when will your next increment will occur \nand how many vacation hours and days you are entitled to.\n\nThe table on the bottom tells you how many hours of vacation credit you\naccrue per month. This table takes into account if an increment happens before \nor after the vacation fiscal year. It will pro-rate the total hours of vacation\nper year.\n\n\nThis calculator was developed by Zayed Elghalayini\nIf bugs are found, please contact me at: Zayed.Elghalayini@cra-arc.gc.ca");
        jTextArea5.setMinimumSize(instructionJDialog.getPreferredSize());
        jTextArea5.setPreferredSize(new java.awt.Dimension(780, 680));
        jScrollPane2.setViewportView(jTextArea5);

        javax.swing.GroupLayout AboutJDialogLayout = new javax.swing.GroupLayout(AboutJDialog.getContentPane());
        AboutJDialog.getContentPane().setLayout(AboutJDialogLayout);
        AboutJDialogLayout.setHorizontalGroup(
            AboutJDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AboutJDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 816, Short.MAX_VALUE)
                .addContainerGap())
        );
        AboutJDialogLayout.setVerticalGroup(
            AboutJDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AboutJDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 654, Short.MAX_VALUE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Vacation Time Calculator");
        setBackground(new java.awt.Color(201, 228, 255));
        setResizable(false);

        MainPanel.setBackground(new java.awt.Color(201, 228, 255));
        MainPanel.setBorder(javax.swing.BorderFactory.createMatteBorder(5, 5, 5, 5, new java.awt.Color(0, 0, 0)));

        leftPanel.setBackground(new java.awt.Color(201, 228, 255));

        startDateLabel.setBackground(new java.awt.Color(204, 255, 204));
        startDateLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        startDateLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        startDateLabel.setText("Enter Start Date: ");
        startDateLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        startDateLabel.setFocusable(false);
        startDateLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        startDateLabel.setOpaque(true);
        startDateLabel.setRequestFocusEnabled(false);

        futureDateLabel.setBackground(new java.awt.Color(204, 255, 204));
        futureDateLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        futureDateLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        futureDateLabel.setText("Future Date");
        futureDateLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        futureDateLabel.setFocusable(false);
        futureDateLabel.setOpaque(true);
        futureDateLabel.setPreferredSize(new java.awt.Dimension(126, 21));

        yearsOfService.setBackground(new java.awt.Color(204, 255, 204));
        yearsOfService.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        yearsOfService.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        yearsOfService.setText("Years of Service");
        yearsOfService.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        yearsOfService.setFocusable(false);
        yearsOfService.setOpaque(true);

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(204, 255, 204));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("     Total Years of\n         Service");
        jTextArea1.setAlignmentX(50.0F);
        jTextArea1.setAutoscrolls(false);
        jTextArea1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextArea1.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextArea1.setFocusable(false);
        jTextArea1.setRequestFocusEnabled(false);
        jTextArea1.setSelectionColor(new java.awt.Color(240, 240, 240));

        startDateYear.setColumns(4);
        startDateYear.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        startDateYear.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        startDateYear.setAutoscrolls(false);
        startDateYear.setNextFocusableComponent(startDateMonth);
        startDateYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startDateYearActionPerformed(evt);
            }
        });

        startDateMonth.setColumns(2);
        startDateMonth.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        startDateMonth.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        startDateMonth.setNextFocusableComponent(startDateDay);
        startDateMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startDateMonthActionPerformed(evt);
            }
        });

        startDateDay.setColumns(2);
        startDateDay.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        startDateDay.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        startDateDay.setNextFocusableComponent(futureDateYear);
        startDateDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startDateDayActionPerformed(evt);
            }
        });

        futureDateMonth.setColumns(2);
        futureDateMonth.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        futureDateMonth.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        futureDateMonth.setNextFocusableComponent(futureDateDay);
        futureDateMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                futureDateMonthActionPerformed(evt);
            }
        });

        futureDateDay.setColumns(2);
        futureDateDay.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        futureDateDay.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        futureDateDay.setNextFocusableComponent(enterYearsOfService);
        futureDateDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                futureDateDayActionPerformed(evt);
            }
        });

        jTextArea2.setEditable(false);
        jTextArea2.setBackground(new java.awt.Color(204, 255, 204));
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTextArea2.setRows(5);
        jTextArea2.setText("    Current Days of\n   Vacation per Year\n");
        jTextArea2.setAutoscrolls(false);
        jTextArea2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextArea2.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextArea2.setFocusable(false);
        jTextArea2.setRequestFocusEnabled(false);
        jTextArea2.setSelectionColor(new java.awt.Color(240, 240, 240));

        jTextArea3.setEditable(false);
        jTextArea3.setBackground(new java.awt.Color(204, 255, 204));
        jTextArea3.setColumns(20);
        jTextArea3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTextArea3.setRows(5);
        jTextArea3.setText("   Current Hours of\n   Vacation per Year\n");
        jTextArea3.setWrapStyleWord(true);
        jTextArea3.setAutoscrolls(false);
        jTextArea3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextArea3.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextArea3.setFocusable(false);
        jTextArea3.setMargin(new java.awt.Insets(10, 2, 2, 2));
        jTextArea3.setRequestFocusEnabled(false);
        jTextArea3.setSelectionColor(new java.awt.Color(240, 240, 240));

        yearlyDaysResult.setBackground(new java.awt.Color(255, 255, 204));
        yearlyDaysResult.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        yearlyDaysResult.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        yearlyDaysResult.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        yearlyDaysResult.setFocusable(false);
        yearlyDaysResult.setOpaque(true);
        yearlyDaysResult.setRequestFocusEnabled(false);

        yearlyHourlyResult.setBackground(new java.awt.Color(255, 255, 204));
        yearlyHourlyResult.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        yearlyHourlyResult.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        yearlyHourlyResult.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        yearlyHourlyResult.setFocusable(false);
        yearlyHourlyResult.setOpaque(true);
        yearlyHourlyResult.setRequestFocusEnabled(false);

        totalYearsResult.setBackground(new java.awt.Color(255, 255, 204));
        totalYearsResult.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        totalYearsResult.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        totalYearsResult.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        totalYearsResult.setFocusable(false);
        totalYearsResult.setOpaque(true);
        totalYearsResult.setRequestFocusEnabled(false);

        clear.setBackground(new java.awt.Color(204, 255, 204));
        clear.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        clear.setText("Clear");
        clear.setNextFocusableComponent(startDateYear);
        clear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearMouseClicked(evt);
            }
        });

        submit.setBackground(new java.awt.Color(204, 255, 204));
        submit.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        submit.setText("Submit");
        submit.setNextFocusableComponent(clear);
        submit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                submitMouseClicked(evt);
            }
        });

        futureDateYear.setColumns(4);
        futureDateYear.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        futureDateYear.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        futureDateYear.setAutoscrolls(false);
        futureDateYear.setNextFocusableComponent(futureDateMonth);
        futureDateYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                futureDateYearActionPerformed(evt);
            }
        });

        enterYearsOfService.setColumns(4);
        enterYearsOfService.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        enterYearsOfService.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        enterYearsOfService.setText("30");
        enterYearsOfService.setAutoscrolls(false);
        enterYearsOfService.setFocusTraversalPolicyProvider(true);
        enterYearsOfService.setNextFocusableComponent(submit);
        enterYearsOfService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterYearsOfServiceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout leftPanelLayout = new javax.swing.GroupLayout(leftPanel);
        leftPanel.setLayout(leftPanelLayout);
        leftPanelLayout.setHorizontalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jTextArea3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jTextArea2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(startDateLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(yearsOfService, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(futureDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, leftPanelLayout.createSequentialGroup()
                        .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(yearlyDaysResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(yearlyHourlyResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(totalYearsResult, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                            .addGroup(leftPanelLayout.createSequentialGroup()
                                .addComponent(enterYearsOfService)
                                .addGap(56, 56, 56)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, leftPanelLayout.createSequentialGroup()
                        .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(startDateYear, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                            .addComponent(futureDateYear))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(leftPanelLayout.createSequentialGroup()
                                .addComponent(futureDateMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(futureDateDay))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, leftPanelLayout.createSequentialGroup()
                                .addComponent(startDateMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(startDateDay, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clear, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(submit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(144, 144, 144))
        );
        leftPanelLayout.setVerticalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(startDateMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(startDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(startDateYear, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(startDateDay))
                .addGap(7, 7, Short.MAX_VALUE)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(futureDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(futureDateYear, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(futureDateMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(futureDateDay, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(enterYearsOfService)
                    .addComponent(yearsOfService, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(totalYearsResult, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(leftPanelLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(yearlyDaysResult, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(submit, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(leftPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(yearlyHourlyResult, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(leftPanelLayout.createSequentialGroup()
                                .addComponent(jTextArea2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextArea3, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(46, 46, 46))
        );

        jTextArea1.getAccessibleContext().setAccessibleParent(jTextArea1);

        bottomPanel.setBackground(new java.awt.Color(201, 228, 255));
        bottomPanel.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 0, 0, 0, new java.awt.Color(0, 0, 0)));
        bottomPanel.setForeground(new java.awt.Color(255, 51, 51));

        janLabel1.setBackground(new java.awt.Color(255, 255, 204));
        janLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        janLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        janLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        janLabel1.setFocusable(false);
        janLabel1.setOpaque(true);
        janLabel1.setRequestFocusEnabled(false);

        jan.setBackground(new java.awt.Color(204, 255, 204));
        jan.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jan.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jan.setText("January");
        jan.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jan.setFocusable(false);
        jan.setOpaque(true);
        jan.setRequestFocusEnabled(false);

        feb.setBackground(new java.awt.Color(204, 255, 204));
        feb.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        feb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        feb.setText("February");
        feb.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        feb.setFocusable(false);
        feb.setOpaque(true);
        feb.setRequestFocusEnabled(false);

        febLabel1.setBackground(new java.awt.Color(255, 255, 204));
        febLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        febLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        febLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        febLabel1.setFocusable(false);
        febLabel1.setOpaque(true);
        febLabel1.setRequestFocusEnabled(false);

        march.setBackground(new java.awt.Color(204, 255, 204));
        march.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        march.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        march.setText("March");
        march.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        march.setFocusable(false);
        march.setOpaque(true);
        march.setRequestFocusEnabled(false);

        marchLabel1.setBackground(new java.awt.Color(255, 255, 204));
        marchLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        marchLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        marchLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        marchLabel1.setFocusable(false);
        marchLabel1.setOpaque(true);
        marchLabel1.setRequestFocusEnabled(false);

        april.setBackground(new java.awt.Color(204, 255, 204));
        april.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        april.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        april.setText("April");
        april.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        april.setFocusable(false);
        april.setOpaque(true);
        april.setRequestFocusEnabled(false);

        aprilLabel1.setBackground(new java.awt.Color(255, 255, 204));
        aprilLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        aprilLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        aprilLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        aprilLabel1.setFocusable(false);
        aprilLabel1.setOpaque(true);
        aprilLabel1.setRequestFocusEnabled(false);

        may.setBackground(new java.awt.Color(204, 255, 204));
        may.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        may.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        may.setText("May");
        may.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        may.setFocusable(false);
        may.setOpaque(true);
        may.setRequestFocusEnabled(false);

        mayLabel1.setBackground(new java.awt.Color(255, 255, 204));
        mayLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        mayLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mayLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        mayLabel1.setFocusable(false);
        mayLabel1.setOpaque(true);
        mayLabel1.setRequestFocusEnabled(false);

        june.setBackground(new java.awt.Color(204, 255, 204));
        june.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        june.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        june.setText("June");
        june.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        june.setFocusable(false);
        june.setOpaque(true);
        june.setRequestFocusEnabled(false);

        juneLabel1.setBackground(new java.awt.Color(255, 255, 204));
        juneLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        juneLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        juneLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        juneLabel1.setFocusable(false);
        juneLabel1.setOpaque(true);
        juneLabel1.setRequestFocusEnabled(false);

        july.setBackground(new java.awt.Color(204, 255, 204));
        july.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        july.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        july.setText("July");
        july.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        july.setFocusable(false);
        july.setOpaque(true);
        july.setRequestFocusEnabled(false);

        julylLabel1.setBackground(new java.awt.Color(255, 255, 204));
        julylLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        julylLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        julylLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        julylLabel1.setFocusable(false);
        julylLabel1.setOpaque(true);
        julylLabel1.setRequestFocusEnabled(false);

        aug.setBackground(new java.awt.Color(204, 255, 204));
        aug.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        aug.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        aug.setText("August");
        aug.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        aug.setFocusable(false);
        aug.setOpaque(true);
        aug.setRequestFocusEnabled(false);

        augLabel1.setBackground(new java.awt.Color(255, 255, 204));
        augLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        augLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        augLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        augLabel1.setFocusable(false);
        augLabel1.setOpaque(true);
        augLabel1.setRequestFocusEnabled(false);

        sept.setBackground(new java.awt.Color(204, 255, 204));
        sept.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        sept.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sept.setText("September");
        sept.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        sept.setFocusable(false);
        sept.setOpaque(true);
        sept.setRequestFocusEnabled(false);

        septlLabel1.setBackground(new java.awt.Color(255, 255, 204));
        septlLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        septlLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        septlLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        septlLabel1.setFocusable(false);
        septlLabel1.setOpaque(true);
        septlLabel1.setRequestFocusEnabled(false);

        oct.setBackground(new java.awt.Color(204, 255, 204));
        oct.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        oct.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        oct.setText("October");
        oct.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        oct.setFocusable(false);
        oct.setOpaque(true);
        oct.setRequestFocusEnabled(false);

        octLabel1.setBackground(new java.awt.Color(255, 255, 204));
        octLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        octLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        octLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        octLabel1.setFocusable(false);
        octLabel1.setOpaque(true);
        octLabel1.setRequestFocusEnabled(false);

        nov.setBackground(new java.awt.Color(204, 255, 204));
        nov.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        nov.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nov.setText("November");
        nov.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        nov.setFocusable(false);
        nov.setOpaque(true);
        nov.setRequestFocusEnabled(false);

        novLabel1.setBackground(new java.awt.Color(255, 255, 204));
        novLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        novLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        novLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        novLabel1.setFocusable(false);
        novLabel1.setOpaque(true);
        novLabel1.setRequestFocusEnabled(false);

        dec.setBackground(new java.awt.Color(204, 255, 204));
        dec.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        dec.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dec.setText("December");
        dec.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        dec.setFocusable(false);
        dec.setOpaque(true);
        dec.setRequestFocusEnabled(false);

        decLabel1.setBackground(new java.awt.Color(255, 255, 204));
        decLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        decLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        decLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        decLabel1.setFocusable(false);
        decLabel1.setOpaque(true);
        decLabel1.setRequestFocusEnabled(false);

        jan2.setBackground(new java.awt.Color(204, 255, 204));
        jan2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jan2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jan2.setText("January");
        jan2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jan2.setFocusable(false);
        jan2.setOpaque(true);
        jan2.setRequestFocusEnabled(false);

        feb2.setBackground(new java.awt.Color(204, 255, 204));
        feb2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        feb2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        feb2.setText("February");
        feb2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        feb2.setFocusable(false);
        feb2.setOpaque(true);
        feb2.setRequestFocusEnabled(false);

        march2.setBackground(new java.awt.Color(204, 255, 204));
        march2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        march2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        march2.setText("March");
        march2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        march2.setFocusable(false);
        march2.setOpaque(true);
        march2.setRequestFocusEnabled(false);

        april2.setBackground(new java.awt.Color(204, 255, 204));
        april2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        april2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        april2.setText("April");
        april2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        april2.setFocusable(false);
        april2.setOpaque(true);
        april2.setRequestFocusEnabled(false);

        may2.setBackground(new java.awt.Color(204, 255, 204));
        may2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        may2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        may2.setText("May");
        may2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        may2.setFocusable(false);
        may2.setOpaque(true);
        may2.setRequestFocusEnabled(false);

        june2.setBackground(new java.awt.Color(204, 255, 204));
        june2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        june2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        june2.setText("June");
        june2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        june2.setFocusable(false);
        june2.setOpaque(true);
        june2.setRequestFocusEnabled(false);

        july2.setBackground(new java.awt.Color(204, 255, 204));
        july2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        july2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        july2.setText("July");
        july2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        july2.setFocusable(false);
        july2.setOpaque(true);
        july2.setRequestFocusEnabled(false);

        aug2.setBackground(new java.awt.Color(204, 255, 204));
        aug2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        aug2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        aug2.setText("August");
        aug2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        aug2.setFocusable(false);
        aug2.setOpaque(true);
        aug2.setRequestFocusEnabled(false);

        sept2.setBackground(new java.awt.Color(204, 255, 204));
        sept2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        sept2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sept2.setText("September");
        sept2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        sept2.setFocusable(false);
        sept2.setOpaque(true);
        sept2.setRequestFocusEnabled(false);

        oct2.setBackground(new java.awt.Color(204, 255, 204));
        oct2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        oct2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        oct2.setText("October");
        oct2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        oct2.setFocusable(false);
        oct2.setOpaque(true);
        oct2.setRequestFocusEnabled(false);

        nov2.setBackground(new java.awt.Color(204, 255, 204));
        nov2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        nov2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nov2.setText("November");
        nov2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        nov2.setFocusable(false);
        nov2.setOpaque(true);
        nov2.setRequestFocusEnabled(false);

        dec2.setBackground(new java.awt.Color(204, 255, 204));
        dec2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        dec2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dec2.setText("December");
        dec2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        dec2.setFocusable(false);
        dec2.setOpaque(true);
        dec2.setRequestFocusEnabled(false);

        decLabel2.setBackground(new java.awt.Color(255, 255, 204));
        decLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        decLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        decLabel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        decLabel2.setFocusable(false);
        decLabel2.setOpaque(true);
        decLabel2.setRequestFocusEnabled(false);

        novLabel2.setBackground(new java.awt.Color(255, 255, 204));
        novLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        novLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        novLabel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        novLabel2.setFocusable(false);
        novLabel2.setOpaque(true);
        novLabel2.setRequestFocusEnabled(false);

        octLabel2.setBackground(new java.awt.Color(255, 255, 204));
        octLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        octLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        octLabel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        octLabel2.setFocusable(false);
        octLabel2.setOpaque(true);
        octLabel2.setRequestFocusEnabled(false);

        septlLabel2.setBackground(new java.awt.Color(255, 255, 204));
        septlLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        septlLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        septlLabel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        septlLabel2.setFocusable(false);
        septlLabel2.setOpaque(true);
        septlLabel2.setRequestFocusEnabled(false);

        augLabel2.setBackground(new java.awt.Color(255, 255, 204));
        augLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        augLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        augLabel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        augLabel2.setFocusable(false);
        augLabel2.setOpaque(true);
        augLabel2.setRequestFocusEnabled(false);

        julylLabel2.setBackground(new java.awt.Color(255, 255, 204));
        julylLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        julylLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        julylLabel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        julylLabel2.setFocusable(false);
        julylLabel2.setOpaque(true);
        julylLabel2.setRequestFocusEnabled(false);

        juneLabel2.setBackground(new java.awt.Color(255, 255, 204));
        juneLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        juneLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        juneLabel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        juneLabel2.setFocusable(false);
        juneLabel2.setOpaque(true);
        juneLabel2.setRequestFocusEnabled(false);

        mayLabel2.setBackground(new java.awt.Color(255, 255, 204));
        mayLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        mayLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mayLabel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        mayLabel2.setFocusable(false);
        mayLabel2.setOpaque(true);
        mayLabel2.setRequestFocusEnabled(false);

        aprilLabel2.setBackground(new java.awt.Color(255, 255, 204));
        aprilLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        aprilLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        aprilLabel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        aprilLabel2.setFocusable(false);
        aprilLabel2.setOpaque(true);
        aprilLabel2.setRequestFocusEnabled(false);

        marchLabel2.setBackground(new java.awt.Color(255, 255, 204));
        marchLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        marchLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        marchLabel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        marchLabel2.setFocusable(false);
        marchLabel2.setOpaque(true);
        marchLabel2.setRequestFocusEnabled(false);

        febLabel2.setBackground(new java.awt.Color(255, 255, 204));
        febLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        febLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        febLabel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        febLabel2.setFocusable(false);
        febLabel2.setOpaque(true);
        febLabel2.setRequestFocusEnabled(false);

        janLabel2.setBackground(new java.awt.Color(255, 255, 204));
        janLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        janLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        janLabel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        janLabel2.setFocusable(false);
        janLabel2.setOpaque(true);
        janLabel2.setRequestFocusEnabled(false);

        currentYearLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        currentYearLabel.setForeground(new java.awt.Color(255, 51, 51));
        currentYearLabel.setPreferredSize(new java.awt.Dimension(50, 50));
        currentYearLabel.setRequestFocusEnabled(false);
        currentYearLabel.setVerifyInputWhenFocusTarget(false);

        futureYearLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        futureYearLabel.setForeground(new java.awt.Color(255, 51, 51));
        futureYearLabel.setPreferredSize(new java.awt.Dimension(50, 50));
        futureYearLabel.setRequestFocusEnabled(false);
        futureYearLabel.setVerifyInputWhenFocusTarget(false);

        javax.swing.GroupLayout bottomPanelLayout = new javax.swing.GroupLayout(bottomPanel);
        bottomPanel.setLayout(bottomPanelLayout);
        bottomPanelLayout.setHorizontalGroup(
            bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bottomPanelLayout.createSequentialGroup()
                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bottomPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(bottomPanelLayout.createSequentialGroup()
                                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(janLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jan, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(febLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(feb, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(marchLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(march, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(aprilLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(april, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(mayLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(may, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(juneLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(june, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(julylLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(july, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(augLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(aug, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(septlLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(sept, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(octLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(oct, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(novLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(nov, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(decLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dec, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(bottomPanelLayout.createSequentialGroup()
                                .addComponent(jan2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(feb2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(march2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(april2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(may2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(june2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(july2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(aug2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sept2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(oct2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nov2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dec2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(bottomPanelLayout.createSequentialGroup()
                                .addComponent(janLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(febLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(marchLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(aprilLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mayLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(juneLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(julylLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(augLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(septlLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(octLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(novLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(decLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(bottomPanelLayout.createSequentialGroup()
                        .addGap(425, 425, 425)
                        .addComponent(currentYearLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bottomPanelLayout.createSequentialGroup()
                        .addGap(426, 426, 426)
                        .addComponent(futureYearLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        bottomPanelLayout.setVerticalGroup(
            bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bottomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(currentYearLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bottomPanelLayout.createSequentialGroup()
                        .addComponent(nov, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(novLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bottomPanelLayout.createSequentialGroup()
                        .addComponent(jan, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(janLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bottomPanelLayout.createSequentialGroup()
                        .addComponent(feb, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(febLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bottomPanelLayout.createSequentialGroup()
                        .addComponent(march, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(marchLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bottomPanelLayout.createSequentialGroup()
                        .addComponent(april, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(aprilLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bottomPanelLayout.createSequentialGroup()
                        .addComponent(may, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(mayLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bottomPanelLayout.createSequentialGroup()
                        .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(june, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(july, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(juneLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(julylLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(bottomPanelLayout.createSequentialGroup()
                        .addComponent(oct, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(octLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bottomPanelLayout.createSequentialGroup()
                        .addComponent(aug, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(augLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bottomPanelLayout.createSequentialGroup()
                        .addComponent(sept, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(septlLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bottomPanelLayout.createSequentialGroup()
                        .addComponent(dec, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(decLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(futureYearLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nov2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jan2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(feb2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(march2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(april2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(may2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(june2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(july2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(oct2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aug2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sept2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dec2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(novLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(janLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(febLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(marchLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aprilLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mayLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(juneLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(julylLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(octLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(augLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(septlLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(decLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21))
        );

        jPanel1.setBackground(new java.awt.Color(201, 228, 255));

        jTextArea7.setEditable(false);
        jTextArea7.setBackground(new java.awt.Color(204, 255, 204));
        jTextArea7.setColumns(5);
        jTextArea7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTextArea7.setLineWrap(true);
        jTextArea7.setRows(3);
        jTextArea7.setText("    \n     Vacation days\n         per year");
        jTextArea7.setAutoscrolls(false);
        jTextArea7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextArea7.setFocusable(false);
        jTextArea7.setRequestFocusEnabled(false);
        jTextArea7.setVerifyInputWhenFocusTarget(false);
        jScrollPane4.setViewportView(jTextArea7);
        jTextArea7.getAccessibleContext().setAccessibleParent(jTextArea1);

        jTextArea9.setEditable(false);
        jTextArea9.setBackground(new java.awt.Color(204, 255, 204));
        jTextArea9.setColumns(5);
        jTextArea9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTextArea9.setLineWrap(true);
        jTextArea9.setRows(3);
        jTextArea9.setText("\n   Vacation hours\n         per year");
        jTextArea9.setAutoscrolls(false);
        jTextArea9.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextArea9.setFocusable(false);
        jTextArea9.setRequestFocusEnabled(false);
        jTextArea9.setVerifyInputWhenFocusTarget(false);
        jScrollPane6.setViewportView(jTextArea9);

        jTextArea8.setEditable(false);
        jTextArea8.setBackground(new java.awt.Color(204, 255, 204));
        jTextArea8.setColumns(5);
        jTextArea8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTextArea8.setLineWrap(true);
        jTextArea8.setRows(3);
        jTextArea8.setText("\n      Anniversary \n            Date");
        jTextArea8.setAutoscrolls(false);
        jTextArea8.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextArea8.setFocusable(false);
        jTextArea8.setRequestFocusEnabled(false);
        jTextArea8.setVerifyInputWhenFocusTarget(false);
        jScrollPane5.setViewportView(jTextArea8);

        jTextArea10.setEditable(false);
        jTextArea10.setBackground(new java.awt.Color(204, 255, 204));
        jTextArea10.setColumns(5);
        jTextArea10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTextArea10.setLineWrap(true);
        jTextArea10.setRows(3);
        jTextArea10.setText("\n   Years of Service");
        jTextArea10.setAutoscrolls(false);
        jTextArea10.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextArea10.setFocusable(false);
        jTextArea10.setRequestFocusEnabled(false);
        jTextArea10.setVerifyInputWhenFocusTarget(false);
        jScrollPane7.setViewportView(jTextArea10);

        jLabel1.setBackground(new java.awt.Color(255, 255, 204));
        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("0");
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jLabel1.setOpaque(true);

        anniversaryDays0.setBackground(new java.awt.Color(255, 255, 204));
        anniversaryDays0.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        anniversaryDays0.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        anniversaryDays0.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        anniversaryDays0.setOpaque(true);

        anniversaryHours0.setBackground(new java.awt.Color(255, 255, 204));
        anniversaryHours0.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        anniversaryHours0.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        anniversaryHours0.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        anniversaryHours0.setOpaque(true);

        anniversaryDate0.setBackground(new java.awt.Color(255, 255, 204));
        anniversaryDate0.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        anniversaryDate0.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        anniversaryDate0.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        anniversaryDate0.setOpaque(true);

        jLabel5.setBackground(new java.awt.Color(255, 255, 204));
        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("7");
        jLabel5.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jLabel5.setOpaque(true);

        anniversaryDays7.setBackground(new java.awt.Color(255, 255, 204));
        anniversaryDays7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        anniversaryDays7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        anniversaryDays7.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        anniversaryDays7.setOpaque(true);

        anniversaryHours7.setBackground(new java.awt.Color(255, 255, 204));
        anniversaryHours7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        anniversaryHours7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        anniversaryHours7.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        anniversaryHours7.setOpaque(true);

        anniversaryDate7.setBackground(new java.awt.Color(255, 255, 204));
        anniversaryDate7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        anniversaryDate7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        anniversaryDate7.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        anniversaryDate7.setOpaque(true);

        jLabel9.setBackground(new java.awt.Color(255, 255, 204));
        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("16");
        jLabel9.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jLabel9.setOpaque(true);

        jLabel10.setBackground(new java.awt.Color(255, 255, 204));
        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("8");
        jLabel10.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jLabel10.setOpaque(true);

        anniversaryDays8.setBackground(new java.awt.Color(255, 255, 204));
        anniversaryDays8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        anniversaryDays8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        anniversaryDays8.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        anniversaryDays8.setOpaque(true);

        anniversaryHours8.setBackground(new java.awt.Color(255, 255, 204));
        anniversaryHours8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        anniversaryHours8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        anniversaryHours8.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        anniversaryHours8.setOpaque(true);

        anniversaryHours16.setBackground(new java.awt.Color(255, 255, 204));
        anniversaryHours16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        anniversaryHours16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        anniversaryHours16.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        anniversaryHours16.setOpaque(true);

        anniversaryDate16.setBackground(new java.awt.Color(255, 255, 204));
        anniversaryDate16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        anniversaryDate16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        anniversaryDate16.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        anniversaryDate16.setOpaque(true);

        anniversaryDate8.setBackground(new java.awt.Color(255, 255, 204));
        anniversaryDate8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        anniversaryDate8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        anniversaryDate8.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        anniversaryDate8.setOpaque(true);

        anniversaryDays16.setBackground(new java.awt.Color(255, 255, 204));
        anniversaryDays16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        anniversaryDays16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        anniversaryDays16.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        anniversaryDays16.setOpaque(true);

        anniversaryHours17.setBackground(new java.awt.Color(255, 255, 204));
        anniversaryHours17.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        anniversaryHours17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        anniversaryHours17.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        anniversaryHours17.setOpaque(true);

        anniversaryDate17.setBackground(new java.awt.Color(255, 255, 204));
        anniversaryDate17.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        anniversaryDate17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        anniversaryDate17.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        anniversaryDate17.setOpaque(true);

        jLabel21.setBackground(new java.awt.Color(255, 255, 204));
        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("17");
        jLabel21.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jLabel21.setOpaque(true);

        anniversaryDays17.setBackground(new java.awt.Color(255, 255, 204));
        anniversaryDays17.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        anniversaryDays17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        anniversaryDays17.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        anniversaryDays17.setOpaque(true);

        jLabel17.setBackground(new java.awt.Color(255, 255, 204));
        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("18");
        jLabel17.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jLabel17.setOpaque(true);

        jLabel20.setBackground(new java.awt.Color(255, 255, 204));
        jLabel20.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setText("27");
        jLabel20.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jLabel20.setOpaque(true);

        anniversaryDays18.setBackground(new java.awt.Color(255, 255, 204));
        anniversaryDays18.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        anniversaryDays18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        anniversaryDays18.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        anniversaryDays18.setOpaque(true);

        anniversaryDays27.setBackground(new java.awt.Color(255, 255, 204));
        anniversaryDays27.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        anniversaryDays27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        anniversaryDays27.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        anniversaryDays27.setOpaque(true);

        anniversaryHours18.setBackground(new java.awt.Color(255, 255, 204));
        anniversaryHours18.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        anniversaryHours18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        anniversaryHours18.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        anniversaryHours18.setOpaque(true);

        anniversaryHours27.setBackground(new java.awt.Color(255, 255, 204));
        anniversaryHours27.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        anniversaryHours27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        anniversaryHours27.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        anniversaryHours27.setOpaque(true);

        anniversaryDate18.setBackground(new java.awt.Color(255, 255, 204));
        anniversaryDate18.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        anniversaryDate18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        anniversaryDate18.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        anniversaryDate18.setOpaque(true);

        anniversaryDate27.setBackground(new java.awt.Color(255, 255, 204));
        anniversaryDate27.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        anniversaryDate27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        anniversaryDate27.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        anniversaryDate27.setOpaque(true);

        jLabel37.setBackground(new java.awt.Color(255, 255, 204));
        jLabel37.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel37.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel37.setText("28");
        jLabel37.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jLabel37.setOpaque(true);

        anniversaryDays28.setBackground(new java.awt.Color(255, 255, 204));
        anniversaryDays28.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        anniversaryDays28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        anniversaryDays28.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        anniversaryDays28.setOpaque(true);

        anniversaryHours28.setBackground(new java.awt.Color(255, 255, 204));
        anniversaryHours28.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        anniversaryHours28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        anniversaryHours28.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        anniversaryHours28.setOpaque(true);

        anniversaryDate28.setBackground(new java.awt.Color(255, 255, 204));
        anniversaryDate28.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        anniversaryDate28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        anniversaryDate28.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        anniversaryDate28.setOpaque(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel37, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(anniversaryDays28, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(anniversaryHours28, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(anniversaryDays7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                            .addComponent(anniversaryDays0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(anniversaryDays8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(anniversaryDays16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(anniversaryDays17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(anniversaryDays18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(anniversaryHours18, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                            .addComponent(anniversaryHours17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(anniversaryHours16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(anniversaryHours8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(anniversaryHours7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(anniversaryHours0, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(anniversaryDays27, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(anniversaryHours27, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(anniversaryDate28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(anniversaryDate27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(anniversaryDate18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(anniversaryDate17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(anniversaryDate16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(anniversaryDate8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(anniversaryDate7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                    .addComponent(anniversaryDate0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                    .addComponent(jScrollPane7)
                    .addComponent(jScrollPane5)
                    .addComponent(jScrollPane6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anniversaryDays0, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anniversaryHours0, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anniversaryDate0, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anniversaryDays7, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anniversaryHours7, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anniversaryDate7, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anniversaryDays8, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anniversaryHours8, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anniversaryDate8, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anniversaryDays16, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anniversaryHours16, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anniversaryDate16, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anniversaryDays17, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anniversaryHours17, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anniversaryDate17, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anniversaryDays18, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anniversaryHours18, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anniversaryDate18, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anniversaryDays27, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anniversaryHours27, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anniversaryDate27, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anniversaryDays28, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anniversaryHours28, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anniversaryDate28, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout MainPanelLayout = new javax.swing.GroupLayout(MainPanel);
        MainPanel.setLayout(MainPanelLayout);
        MainPanelLayout.setHorizontalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addComponent(leftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(bottomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        MainPanelLayout.setVerticalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(leftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(bottomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jMenuBar1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jMenuBar1.setMinimumSize(new java.awt.Dimension(0, 4));

        fileMenu.setText("File");

        print.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        print.setText("Print");
        print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printActionPerformed(evt);
            }
        });
        fileMenu.add(print);

        exitMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        exitMenu.setText("Exit");
        exitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenu);

        jMenuBar1.add(fileMenu);

        helpMenu.setText("Help");
        helpMenu.setToolTipText("");

        collectiveAgreementMenu.setText("Collective Agreement");
        collectiveAgreementMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                collectiveAgreementMenuActionPerformed(evt);
            }
        });
        helpMenu.add(collectiveAgreementMenu);

        instructionMenu.setText("Instructions");
        instructionMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instructionMenuActionPerformed(evt);
            }
        });
        helpMenu.add(instructionMenu);

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Method receives mouse input when the submit button is cleared
     *
     * @param evt - the event that is passed
     */
    private void submitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_submitMouseClicked
        try {
            startDateValidation();
            yearsOfServiceFieldValidation();
            currentHoursOfVacation();
            currentDaysOfVacation();
        } catch (NumberFormatException e) {
            if (!isStartDateValid) {
                popUpMessage("Invalid start date", "Invalid date");
            } else if (startDate.getYear() < 1900) {
                popUpMessage("Enter a year greater than 1900", "Invalid year");
            } else if (startDate.isAfter(todaysDate)) {
                popUpMessage("Enter a date less than today's date", "Invalid Year");
            } else if (!futureDateEmpty) {
                popUpMessage("Future date must be greater than today's date: " + todaysDate, "Invalid future date");
            } else if (futureDateEmpty) {
                popUpMessage("Invalid future date", "Invalid future date");
            } else {
                popUpMessage("Enter a valid date", "Invalid Input");
            }
        } catch (DateTimeException e) {
            popUpMessage("Enter a valid date", "Invalid Date");
        } catch (Exception e) {

        }
    }//GEN-LAST:event_submitMouseClicked

    /**
     * Method receives mouse input when the clear button is clicked
     *
     * @param evt
     */
    private void clearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearMouseClicked
        clearFields();
    }//GEN-LAST:event_clearMouseClicked

    /**
     * Opens a link to the collective agreement
     *
     * @param evt
     */
    private void collectiveAgreementMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_collectiveAgreementMenuActionPerformed
        String s = "https://www.canada.ca/en/revenue-agency/corporate/about-canada-revenue-agency-cra/collective-bargaining/pipsc.html#h_15";
        Desktop desktop = Desktop.getDesktop();
        try {
            desktop.browse(URI.create(s));
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_collectiveAgreementMenuActionPerformed

    /**
     * Method that does the printing
     *
     * @param evt
     */
    private void printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printActionPerformed
        PrinterJob pjob = PrinterJob.getPrinterJob();
        PageFormat preformat = pjob.defaultPage();
        preformat.setOrientation(PageFormat.LANDSCAPE);
        PageFormat postformat = pjob.pageDialog(preformat);
        //If user does not hit cancel then print.
        if (preformat != postformat) {
            //Set print component
            pjob.setPrintable(new Printer(this), postformat);
            if (pjob.printDialog()) {
                try {
                    pjob.print();
                } catch (PrinterException ex) {
                    Logger.getLogger(VacationTimeCalculatorGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_printActionPerformed

    private void exitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuActionPerformed

    private void instructionMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_instructionMenuActionPerformed
        instructionJDialog.setLocation(point);
        instructionJDialog.setVisible(true);
    }//GEN-LAST:event_instructionMenuActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        AboutJDialog.setLocation(point);
        AboutJDialog.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void futureDateMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_futureDateMonthActionPerformed
        futureDateDay.requestFocus();
    }//GEN-LAST:event_futureDateMonthActionPerformed

    private void futureDateDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_futureDateDayActionPerformed
        submitMouseClicked(new MouseEvent((Component) evt.getSource(), 0, 0, 0, 0, 0, 0, false));
        enterYearsOfService.requestFocus();
    }//GEN-LAST:event_futureDateDayActionPerformed

    private void startDateYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startDateYearActionPerformed
        startDateMonth.requestFocus();
    }//GEN-LAST:event_startDateYearActionPerformed

    private void startDateMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startDateMonthActionPerformed
        startDateDay.requestFocus();
    }//GEN-LAST:event_startDateMonthActionPerformed

    private void startDateDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startDateDayActionPerformed
        submitMouseClicked(new MouseEvent((Component) evt.getSource(), 0, 0, 0, 0, 0, 0, false));
        futureDateYear.requestFocus();
    }//GEN-LAST:event_startDateDayActionPerformed

    private void futureDateYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_futureDateYearActionPerformed
        futureDateMonth.requestFocus();
    }//GEN-LAST:event_futureDateYearActionPerformed

    private void enterYearsOfServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterYearsOfServiceActionPerformed
        submitMouseClicked(new MouseEvent((Component) evt.getSource(), 0, 0, 0, 0, 0, 0, false));
        startDateYear.requestFocus();
    }//GEN-LAST:event_enterYearsOfServiceActionPerformed

    /**
     * Validates the start date field and executes the other methods
     *
     * @throws Exception
     */
    private void startDateValidation() throws Exception {

        if (!(startDateYear.getText().isEmpty() & startDateMonth.getText().isEmpty() & startDateDay.getText().isEmpty())) {

            int startDateY = Integer.parseInt(startDateYear.getText());
            int startDateM = Integer.parseInt(startDateMonth.getText());
            int startDateD = Integer.parseInt(startDateDay.getText());
            startDate = LocalDate.of(startDateY, startDateM, startDateD);
            startDateEmpty = false;
            if (startDate.getYear() < 1900) {
                popUpMessage("Enter year greater than 1900", "Invalid year");
                throw new Exception();
            } else if (startDate.isAfter(todaysDate)) {
                popUpMessage("Enter a date less than today's date", "Invalid date");
                throw new Exception();
            }
            isStartDateValid = true;
            currentYearLabel.setText(String.format("%d", todaysDate.getYear()));
            futureDateValidation();
            currentMonthlyBreakdown();
            futureMonthlyBreakdown();
            calculateAnniversayDate();
            anniversaryMonthlyBreakdown();

        } else if (!enterYearsOfService.getText().isEmpty()) {
            //yearsOfServiceFieldValidation();
        } else {
            popUpMessage("Start date field is empty", "Empty Fields");
        }
    }

    private void futureDateValidation() throws Exception {
        if (isStartDateValid) {
            if (!(futureDateYear.getText().isEmpty() & futureDateMonth.getText().isEmpty() & futureDateDay.getText().isEmpty())) {
                futureDateEmpty = false;
                int futureDateY = Integer.parseInt(futureDateYear.getText());
                int futureDateM = Integer.parseInt(futureDateMonth.getText());
                int futureDateD = Integer.parseInt(futureDateDay.getText());
                futureDate = LocalDate.of(futureDateY, futureDateM, futureDateD);

                if (futureDate.isBefore(todaysDate)) {
                    popUpMessage("Enter a date greater than today's date", "Invalid Date");
                    throw new Exception();
                }
                calculateYearsOfService(future);
            } else {
                futureDateEmpty = true;
            }
        }
    }

    private void yearsOfServiceFieldValidation() {
        if (startDateEmpty) {
            if (!(enterYearsOfService.getText().isEmpty())) {
                try {
                    enterYearsOfServiceVar = Double.parseDouble(enterYearsOfService.getText());
                    if (enterYearsOfServiceVar < 0.0 || enterYearsOfServiceVar > 100.0) {
                        popUpMessage("Please enter a number between 0 - 100", "Invalid number");
                        throw new Exception();
                    }
                    totalYearsResult.setText(String.format("%.2f", enterYearsOfServiceVar));
                    isYearsOfServiceValid = true;
                } catch (NumberFormatException e) {
                    popUpMessage("Please enter numbers only", "Invalid Input");
                } catch (Exception e) {

                }
            }
        } else {
            enterYearsOfService.setText("");
        }
    }

    private void currentHoursOfVacation() {
        if (isStartDateValid) {
            JLabel[] monthlyCredit = {aprilLabel1, mayLabel1, juneLabel1, julylLabel1, augLabel1, septlLabel1, octLabel1, novLabel1, decLabel1, janLabel2, febLabel2, marchLabel2};
            String[] monthlyCreditHours = new String[monthlyCredit.length];
            double[] monthCreditHoursDouble = new double[monthlyCreditHours.length];
            double vacationHoursPerYear = 0;
            for (int i = 0; i < monthlyCreditHours.length; i++) {
                monthlyCreditHours[i] = monthlyCredit[i].getText();
            }
            for (int i = 0; i < monthCreditHoursDouble.length; i++) {
                monthCreditHoursDouble[i] = Double.parseDouble(monthlyCreditHours[i]);
                vacationHoursPerYear += monthCreditHoursDouble[i];
            }
            yearlyHourlyResult.setText(String.format("%.3f", vacationHoursPerYear));
        } else if (!enterYearsOfService.getText().isEmpty() && isYearsOfServiceValid) {
            boolean stop = false;
            for (int i = 0; i < hourlyMonthCreditArray.length; i++) {
                for (int j = 0; j < hourlyMonthCreditArray[i].length; j++) {
                    if (enterYearsOfServiceVar == hourlyMonthCreditArray[i][j]) {
                        yearlyHourlyResult.setText(String.format("%.3f", hourlyMonthCreditArray[i][1] * 12));
                        stop = true;
                        break;
                    } else if (enterYearsOfServiceVar < hourlyMonthCreditArray[i][0]) {
                        yearlyHourlyResult.setText(String.format("%.3f", hourlyMonthCreditArray[i - 1][1] * 12));
                        stop = true;
                        break;
                    } else if (enterYearsOfServiceVar > 28) {
                        yearlyHourlyResult.setText(String.format("%.3f", (18.750 * 12)));
                        stop = true;
                    }
                    if (stop) {
                        break;
                    }
                }
                if (stop) {
                    break;
                }
            }
        }
    }

    private void currentDaysOfVacation() {
        double yearlyHourlyResultVar;
        if (!startDateEmpty) {
            try {
                yearlyHourlyResultVar = Double.parseDouble(yearlyHourlyResult.getText());
                yearlyDaysResult.setText(String.format("%.3f", yearlyHourlyResultVar / 7.5));
            } catch (Exception e) {

            }
        } else if (!yearlyHourlyResult.getText().isEmpty() && isYearsOfServiceValid) {
            try {
                yearlyHourlyResultVar = Double.parseDouble(yearlyHourlyResult.getText());
                yearlyDaysResult.setText(String.format("%.3f", yearlyHourlyResultVar / 7.5));
            } catch (Exception e) {
            }
        }
    }

    private void calculateYearsOfService(boolean currentOrFuture) {
        double temp;

        if (currentOrFuture) {
            this.currentPeriod = Period.between(startDate, todaysDate);
            temp = currentPeriod.getYears() + ((double) (currentPeriod.getMonths() / 12.0));
            totalYearsResult.setText(String.format("%.2f", temp));
        } else {
            if (futureDateEmpty) {
                futurePeriod = Period.between(startDate, todaysDate.withYear(todaysDate.getYear() + 1));
                temp = (futurePeriod.getYears() - 1) + ((double) (futurePeriod.getMonths() / 12.0));
                totalYearsResult.setText(String.format("%.2f", temp));
            } else {
                futurePeriod = Period.between(startDate, futureDate);
                temp = futurePeriod.getYears() + ((double) (futurePeriod.getMonths() / 12.0));
                currentYearLabel.setText(String.format("%d", futureDate.getYear()));
            }
            totalYearsResult.setText(String.format("%.2f", temp));
        }
    }

    private Period changeMonth(int month, boolean currentOrFuture) {
        Period period;

        if (currentOrFuture && futureDateEmpty) {
            period = Period.between(startDate, todaysDate.withMonth(month));
        } else if (!currentOrFuture && !futureDateEmpty) {
            period = Period.between(startDate, futureDate.withMonth(month).withYear(futureDate.getYear() + 1));
        } else {
            period = Period.between(startDate, futureDate.withMonth(month));
        }
        return period;
    }

    private void currentMonthlyBreakdown() {
        double minPeriod;
        Period currentPeriod;
        if (!futureDateEmpty) {
            currentPeriod = futurePeriod;
        } else {
            currentPeriod = this.currentPeriod;
        }

        JLabel[] currentMonthLabels = {janLabel1, febLabel1, marchLabel1, aprilLabel1, mayLabel1, juneLabel1, julylLabel1, augLabel1, septlLabel1, octLabel1, novLabel1, decLabel1};
        JLabel[] monthLabels = {jan, feb, march, april, may, june, july, aug, sept, oct, nov, dec};
        for (int i = 0; i < monthsNumbers.length; i++) {
            currentPeriod = changeMonth(monthsNumbers[i], true);
            minPeriod = Math.floor(currentPeriod.getYears() + ((double) currentPeriod.getMonths() / 12.0));
            for (int j = 0; j < hourlyMonthCreditArray.length; j++) {
                if (j == 7 || minPeriod == hourlyMonthCreditArray[j][0] || minPeriod < hourlyMonthCreditArray[j + 1][0]) {
                    if (minPeriod >= 0 && minPeriod < 7) {
                        currentMonthLabels[i].setText(String.format("%.3f", hourlyMonthCreditArray[j][1]));
                    } else if (minPeriod >= 7 && minPeriod < 8) {
                        currentMonthLabels[i].setText(String.format("%.3f", hourlyMonthCreditArray[j][1]));
                    } else if (minPeriod >= 8 && minPeriod < 16) {
                        currentMonthLabels[i].setText(String.format("%.3f", hourlyMonthCreditArray[j][1]));
                    } else if (minPeriod >= 16 && minPeriod < 17) {
                        currentMonthLabels[i].setText(String.format("%.3f", hourlyMonthCreditArray[j][1]));
                    } else if (minPeriod >= 17 && minPeriod < 18) {
                        currentMonthLabels[i].setText(String.format("%.3f", hourlyMonthCreditArray[j][1]));
                    } else if (minPeriod >= 18 && minPeriod < 27) {
                        currentMonthLabels[i].setText(String.format("%.3f", hourlyMonthCreditArray[j][1]));
                    } else if (minPeriod > 27) {
                        currentMonthLabels[i].setText(String.format("%.3f", hourlyMonthCreditArray[j][1]));
                    }
                    break;
                }
            }
            if (startDate.getMonthValue() == i + 1) {
                monthLabels[i].setForeground(Color.RED);
            } else {
                monthLabels[i].setForeground(Color.BLACK);
            }
        }
    }

    private void clearFields() {
        JLabel[] monthsLabel = {janLabel1, febLabel1, marchLabel1, aprilLabel1, mayLabel1, juneLabel1, julylLabel1, augLabel1, septlLabel1, octLabel1, novLabel1, decLabel1,
            janLabel2, febLabel2, marchLabel2, aprilLabel2, mayLabel2, juneLabel2, julylLabel2, augLabel2, septlLabel2, octLabel2, novLabel2, decLabel2};
        JLabel[] anniversaryHours = {anniversaryHours0, anniversaryHours7, anniversaryHours8, anniversaryHours16, anniversaryHours17, anniversaryHours18, anniversaryHours27, anniversaryHours28};
        JLabel[] anniversaryDays = {anniversaryDays0, anniversaryDays7, anniversaryDays8, anniversaryDays16, anniversaryDays17, anniversaryDays18, anniversaryDays27, anniversaryDays28};
        JLabel[] monthLabels2 = {jan2, feb2, march2, april2, may2, june2, july2, aug2, sept2, oct2, nov2, dec2};
        JLabel[] monthLabels1 = {jan, feb, march, april, may, june, july, aug, sept, oct, nov, dec};
        for (int i = 0; i < monthsLabel.length; i++) {
            monthsLabel[i].setText("");
            if (i < 8) {
                anniversaryDays[i].setText("");
                anniversaryHours[i].setText("");
            }
            if (i < 12) {
                monthLabels1[i].setForeground(Color.BLACK);
                monthLabels2[i].setForeground(Color.BLACK);
            }
        }
        //Resets the booleans
        startDateEmpty = true;
        futureDateEmpty = true;
        isStartDateValid = false;
        isYearsOfServiceValid = false;
        //Resets the fields
        startDateDay.setText("");
        startDateMonth.setText("");
        startDateYear.setText("");

        futureDateDay.setText("");
        futureDateMonth.setText("");
        futureDateYear.setText("");

        enterYearsOfService.setText("");
        totalYearsResult.setText("");
        yearlyDaysResult.setText("");
        yearlyHourlyResult.setText("");

        anniversaryDate0.setText("");
        anniversaryDate7.setText("");
        anniversaryDate8.setText("");
        anniversaryDate16.setText("");
        anniversaryDate17.setText("");
        anniversaryDate18.setText("");
        anniversaryDate27.setText("");
        anniversaryDate28.setText("");

        currentYearLabel.setText("");
        futureYearLabel.setText("");
    }

    private void futureMonthlyBreakdown() {
        double minPeriod;
        Period futurePeriod;

        JLabel[] currentMonthLabels2 = {janLabel2, febLabel2, marchLabel2, aprilLabel2, mayLabel2, juneLabel2, julylLabel2, augLabel2, septlLabel2, octLabel2, novLabel2, decLabel2};
        JLabel[] monthLabels2 = {jan2, feb2, march2, april2, may2, june2, july2, aug2, sept2, oct2, nov2, dec2};
        if (futureDateEmpty) {
            futureDate = todaysDate.withYear(todaysDate.getYear() + 1).withMonth(startDate.getMonthValue());
            futureYearLabel.setText(String.format("%d", futureDate.getYear()));
            futurePeriod = this.futurePeriod;
            calculateYearsOfService(future);
        } else {
            futurePeriod = this.futurePeriod.withYears(futureDate.getYear() + 1);
            futureYearLabel.setText(String.format("%d", futurePeriod.getYears()));
        }

        for (int i = 0; i < monthsNumbers.length; i++) {
            futurePeriod = changeMonth(monthsNumbers[i], false);
            minPeriod = Math.floor(futurePeriod.getYears() + ((double) futurePeriod.getMonths() / 12.0));
            for (int j = 0; j < hourlyMonthCreditArray.length; j++) {
                if (j == 7 || minPeriod == hourlyMonthCreditArray[j][0] || minPeriod < hourlyMonthCreditArray[j + 1][0]) {
                    if (minPeriod >= 0 && minPeriod < 7) {
                        currentMonthLabels2[i].setText(String.format("%.3f", hourlyMonthCreditArray[j][1]));
                    } else if (minPeriod >= 7 && minPeriod < 8) {
                        currentMonthLabels2[i].setText(String.format("%.3f", hourlyMonthCreditArray[j][1]));
                    } else if (minPeriod >= 8 && minPeriod < 16) {
                        currentMonthLabels2[i].setText(String.format("%.3f", hourlyMonthCreditArray[j][1]));
                    } else if (minPeriod >= 16 && minPeriod < 17) {
                        currentMonthLabels2[i].setText(String.format("%.3f", hourlyMonthCreditArray[j][1]));
                    } else if (minPeriod >= 17 && minPeriod < 18) {
                        currentMonthLabels2[i].setText(String.format("%.3f", hourlyMonthCreditArray[j][1]));
                    } else if (minPeriod >= 18 && minPeriod < 27) {
                        currentMonthLabels2[i].setText(String.format("%.3f", hourlyMonthCreditArray[j][1]));
                    } else if (minPeriod > 27) {
                        currentMonthLabels2[i].setText(String.format("%.3f", hourlyMonthCreditArray[j][1]));
                    }
                    break;
                }
                if (futureDate.getMonthValue() == i + 1) {
                    monthLabels2[i].setForeground(Color.RED);
                } else {
                    monthLabels2[i].setForeground(Color.BLACK);
                }
            }
        }
    }

    private void popUpMessage(String infoMessage, String titleBar) {
        JOptionPane.showMessageDialog(this, infoMessage, titleBar, JOptionPane.INFORMATION_MESSAGE);
    }

    private void calculateAnniversayDate() {
        anniversaryDate0.setText("" + startDate);
        anniversaryDate7.setText("" + startDate.withYear(startDate.getYear() + 7));
        anniversaryDate8.setText("" + startDate.withYear(startDate.getYear() + 8));
        anniversaryDate16.setText("" + startDate.withYear(startDate.getYear() + 16));
        anniversaryDate17.setText("" + startDate.withYear(startDate.getYear() + 17));
        anniversaryDate18.setText("" + startDate.withYear(startDate.getYear() + 18));
        anniversaryDate27.setText("" + startDate.withYear(startDate.getYear() + 27));
        anniversaryDate28.setText("" + startDate.withYear(startDate.getYear() + 28));
    }

    private void anniversaryMonthlyBreakdown() {
        LocalDate anniversaryDate0var = startDate;
        LocalDate anniversaryDate7var = startDate.withYear(startDate.getYear() + 7);
        LocalDate anniversaryDate8var = startDate.withYear(startDate.getYear() + 8);
        LocalDate anniversaryDate16var = startDate.withYear(startDate.getYear() + 16);
        LocalDate anniversaryDate17var = startDate.withYear(startDate.getYear() + 17);
        LocalDate anniversaryDate18var = startDate.withYear(startDate.getYear() + 18);
        LocalDate anniversaryDate27var = startDate.withYear(startDate.getYear() + 27);
        LocalDate anniversaryDate28var = startDate.withYear(startDate.getYear() + 28);

        LocalDate[] anniversaryDateArray = {anniversaryDate0var, anniversaryDate7var, anniversaryDate8var, anniversaryDate16var, anniversaryDate17var, anniversaryDate18var, anniversaryDate27var, anniversaryDate28var};
        JLabel[] anniversaryHours = {anniversaryHours0, anniversaryHours7, anniversaryHours8, anniversaryHours16, anniversaryHours17, anniversaryHours18, anniversaryHours27, anniversaryHours28};
        JLabel[] anniversaryDays = {anniversaryDays0, anniversaryDays7, anniversaryDays8, anniversaryDays16, anniversaryDays17, anniversaryDays18, anniversaryDays27, anniversaryDays28};

        double[][] anniversaryPeriodMonthlyCredits = new double[8][12];

        int[] currentAnniversaryMonthNumber = {4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3};
        Period tempPeriod;

        int k = 0;
        for (int i = 0; i < anniversaryDateArray.length; i++) {
            for (int j = 0; j < currentAnniversaryMonthNumber.length; j++) {
                if (j > 8) {
                    tempPeriod = changeMonthsAnniversary(currentAnniversaryMonthNumber[j], anniversaryDateArray[i].plusYears(1));
                } else {
                    tempPeriod = changeMonthsAnniversary(currentAnniversaryMonthNumber[j], anniversaryDateArray[i]);
                }
                anniversaryPeriodMonthlyCredits[i][j] = Math.floor(tempPeriod.getYears() + (double) tempPeriod.getMonths() / 12);
            }
        }

        double[] credits = new double[8];
        double totalCredits = 0;

        //Calculates the hours based on anniversary years increments
        for (int i = 0; i < anniversaryPeriodMonthlyCredits.length; i++) {
            k = 0;
            for (int j = 0; j < anniversaryPeriodMonthlyCredits[i].length; j++) {
                if (anniversaryPeriodMonthlyCredits[i][j] <= hourlyMonthCreditArray[k][0]) { //0
                    totalCredits += hourlyMonthCreditArray[k][1];
                } else if ((anniversaryPeriodMonthlyCredits[i][j] > hourlyMonthCreditArray[k][0]) && k == 7) {
                    totalCredits += hourlyMonthCreditArray[k][1];
                } else {
                    k++;
                    j--;
                }
            }
            credits[i] = totalCredits;
            totalCredits = 0;
        }

        //Populates the anniversary hours and days labels in the GUI
        for (int i = 0; i < credits.length; i++) {
            anniversaryHours[i].setText(String.format("%.3f", credits[i]));
            anniversaryDays[i].setText(String.format("%.3f", credits[i] / 7.5));
        }
    }

    private Period changeMonthsAnniversary(int month, LocalDate date) {
        Period period = Period.between(startDate, date.withMonth(month));
        return period;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VacationTimeCalculatorGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VacationTimeCalculatorGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VacationTimeCalculatorGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VacationTimeCalculatorGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                VacationTimeCalculatorGUI frame = new VacationTimeCalculatorGUI();

                frame.setLocationRelativeTo(
                        null);
                Image img = (new ImageIcon(getClass().getResource("icon.jpg"))).getImage();

                frame.setIconImage(img);

                frame.setVisible(
                        true);
            }
        }
        );
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog AboutJDialog;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JLabel anniversaryDate0;
    private javax.swing.JLabel anniversaryDate16;
    private javax.swing.JLabel anniversaryDate17;
    private javax.swing.JLabel anniversaryDate18;
    private javax.swing.JLabel anniversaryDate27;
    private javax.swing.JLabel anniversaryDate28;
    private javax.swing.JLabel anniversaryDate7;
    private javax.swing.JLabel anniversaryDate8;
    private javax.swing.JLabel anniversaryDays0;
    private javax.swing.JLabel anniversaryDays16;
    private javax.swing.JLabel anniversaryDays17;
    private javax.swing.JLabel anniversaryDays18;
    private javax.swing.JLabel anniversaryDays27;
    private javax.swing.JLabel anniversaryDays28;
    private javax.swing.JLabel anniversaryDays7;
    private javax.swing.JLabel anniversaryDays8;
    private javax.swing.JLabel anniversaryHours0;
    private javax.swing.JLabel anniversaryHours16;
    private javax.swing.JLabel anniversaryHours17;
    private javax.swing.JLabel anniversaryHours18;
    private javax.swing.JLabel anniversaryHours27;
    private javax.swing.JLabel anniversaryHours28;
    private javax.swing.JLabel anniversaryHours7;
    private javax.swing.JLabel anniversaryHours8;
    private javax.swing.JLabel april;
    private javax.swing.JLabel april2;
    private javax.swing.JLabel aprilLabel1;
    private javax.swing.JLabel aprilLabel2;
    private javax.swing.JLabel aug;
    private javax.swing.JLabel aug2;
    private javax.swing.JLabel augLabel1;
    private javax.swing.JLabel augLabel2;
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JButton clear;
    private javax.swing.JMenuItem collectiveAgreementMenu;
    private javax.swing.JLabel currentYearLabel;
    private javax.swing.JLabel dec;
    private javax.swing.JLabel dec2;
    private javax.swing.JLabel decLabel1;
    private javax.swing.JLabel decLabel2;
    private javax.swing.JTextField enterYearsOfService;
    private javax.swing.JMenuItem exitMenu;
    private javax.swing.JLabel feb;
    private javax.swing.JLabel feb2;
    private javax.swing.JLabel febLabel1;
    private javax.swing.JLabel febLabel2;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JTextField futureDateDay;
    private javax.swing.JLabel futureDateLabel;
    private javax.swing.JTextField futureDateMonth;
    private javax.swing.JTextField futureDateYear;
    private javax.swing.JLabel futureYearLabel;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JDialog instructionJDialog;
    private javax.swing.JMenuItem instructionMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea10;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextArea jTextArea5;
    private javax.swing.JTextArea jTextArea7;
    private javax.swing.JTextArea jTextArea8;
    private javax.swing.JTextArea jTextArea9;
    private javax.swing.JLabel jan;
    private javax.swing.JLabel jan2;
    private javax.swing.JLabel janLabel1;
    private javax.swing.JLabel janLabel2;
    private javax.swing.JLabel july;
    private javax.swing.JLabel july2;
    private javax.swing.JLabel julylLabel1;
    private javax.swing.JLabel julylLabel2;
    private javax.swing.JLabel june;
    private javax.swing.JLabel june2;
    private javax.swing.JLabel juneLabel1;
    private javax.swing.JLabel juneLabel2;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JLabel march;
    private javax.swing.JLabel march2;
    private javax.swing.JLabel marchLabel1;
    private javax.swing.JLabel marchLabel2;
    private javax.swing.JLabel may;
    private javax.swing.JLabel may2;
    private javax.swing.JLabel mayLabel1;
    private javax.swing.JLabel mayLabel2;
    private javax.swing.JLabel nov;
    private javax.swing.JLabel nov2;
    private javax.swing.JLabel novLabel1;
    private javax.swing.JLabel novLabel2;
    private javax.swing.JLabel oct;
    private javax.swing.JLabel oct2;
    private javax.swing.JLabel octLabel1;
    private javax.swing.JLabel octLabel2;
    private javax.swing.JMenuItem print;
    private javax.swing.JLabel sept;
    private javax.swing.JLabel sept2;
    private javax.swing.JLabel septlLabel1;
    private javax.swing.JLabel septlLabel2;
    private javax.swing.JTextField startDateDay;
    private javax.swing.JLabel startDateLabel;
    private javax.swing.JTextField startDateMonth;
    private javax.swing.JTextField startDateYear;
    private javax.swing.JButton submit;
    private javax.swing.JLabel totalYearsResult;
    private javax.swing.JLabel yearlyDaysResult;
    private javax.swing.JLabel yearlyHourlyResult;
    private javax.swing.JLabel yearsOfService;
    // End of variables declaration//GEN-END:variables
}
